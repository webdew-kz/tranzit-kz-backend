generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String? @unique
  phone String? @unique
  hash  String

  name    String?
  surname String?
  city    String?
  avatar  String? @default("/uploads/no-avatar.png")
  role    Role    @default(USER)

  whatsapp String?
  telegram String?
  viber    String?
  skype    String?

  subscriptionStartDate DateTime? // дата начала подписки
  subscriptionEndDate   DateTime? // дата окончания подписки
  subscriptionStatus    Boolean?  @default(false) // статус подписки

  isVerified Boolean? @default(false) // статус верификации
  isBlocked  Boolean? @default(false) // статус блокировки
  documents  String[] @default([]) // документы

  cargos   Cargo[]
  wishList WishList[]

  @@map("user")
}

model Cargo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title           String // название
  price           Int // цена
  currency        Currency // например: "KZT", "USD" и т.д.
  note            String? // необязательное примечание
  placesLoading   String[] // места погрузки
  placesUnloading String[] // места разгрузки
  distance        Int? // расстояние в км
  tariff          Int? // тариф в тенге за км
  routeLink       String? // ссылка на маршрут
  weight          Float // Тоннаж
  volume          Float // Объем в м³
  periodDays      Int       @default(5) // например, 1, 2, 3… до 30
  startDate       DateTime // дата начала
  endDate         DateTime? // дата окончания

  isArchived   Boolean?  @default(false) // статус архивирования
  archivedDate DateTime? // дата архивирования

  truckType TruckType[] // тип фуры

  loadingType LoadingType[] // тип загрузки

  paymentMethod            PaymentMethod[] // способ оплаты
  paymentPeriod            PaymentPeriod[] @default([]) // период оплаты
  paymentOther             PaymentOther[]  @default([]) // другие детали оплаты
  paymentPrepaymentPercent String? // предоплата %
  paymentDeferredDays      String? // отсрочка дней

  optionDocuments    Documents[]   @default([]) // документы
  optionDocumentsAdr DocumentsAdr? // документы ADR

  optionLoadings               Loadings[] @default([]) // погрузка
  optionLoadingsTimeLoading    String? // время погрузки
  optionLoadingsTimeUnloading  String? // время разгрузки
  optionLoadingsDateUnloading  DateTime? // дата разгрузки 
  optionLoadingsPlaceLoading   String? // место погрузки
  optionLoadingsPlaceUnloading String? // место разгрузки
  optionLoadingsBigBag         String? // биг-бэг

  optionTerms            Terms[]           @default([]) // условия
  optionTermsTemperature String? // температура
  optionTermsQtyPallets  String? // количество паллет
  optionTermsCorners     String? // Уголки
  optionTermsBelts       String? // ремни
  optionTermsPalletsType TermsPalletsType? // тип паллет

  optionAdditionally Additionally[] @default([]) // дополнительно

  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  userName  String? // имя юзера
  userPhone String? // телефон юзера
  whatsapp  String?
  telegram  String?
  viber     String?
  skype     String?

  views   Views?  @relation(fields: [viewsId], references: [id], onDelete: Cascade)
  viewsId String?

  wishList WishList[]

  @@map("cargo")
}

model Views {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  count Int @default(0)

  cargo Cargo[]

  @@map("views")
}

model WishList {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String? // id юзера
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  cargoId String? // id груза
  cargo   Cargo?  @relation(fields: [cargoId], references: [id], onDelete: Cascade)

  @@unique([userId, cargoId])
  @@map("wish_list")
}

model CurrencyRate {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String @unique // Например: USD
  rate  String

  @@map("currency_rate")
}

enum Role {
  ADMIN // админ
  USER // юзер
}

enum Currency {
  KZT // тенге
  USD // доллар
  RUB // рубль
  EUR // евро
  CNY // юань
  TRY // турецкая лира
  UZS // узбекский сум
}

enum PaymentMethod {
  CASH // нал
  CASHLESS // безнал
  CARD // карта
  ANY // любой
  COMBINE // комбинированный
}

enum PaymentPeriod {
  WHEN_LOADING // при загрузке
  WHEN_UNLOADING // при разгрузке
  AFTER_REGISTER // После регистрации налоговой накладной
  ORIGIN_DOCS // По оригиналам документов
}

enum PaymentOther {
  AUCTION // Торг
  NO_AUCTION // без торга
  NDS //НДС
  NO_NDS // без НДС
  FOR_FUEL // за топливо
  FAST_PAY // быстрая оплата
}

enum TruckType {
  ANY // любой
  TENT // тент
  ISOTHERM // изотерм
  METAL // цельномет.
  REFRIGERATOR // рефрижератор
  PASSENGER_BUS // автобус грузопас.
  LUXURY_BUS // автобус люкс
  CAR_CARRIER // автовоз
  CRANE // автокран
  FUEL_TANKER // бензовоз
  CONCRETE_MIXER // бетоносмеситель
  BITUM_TANKER // битумовоз
  PLATFORM_BOARD // бортовая
  GRAIN_TRUCK // зерновоз
  GRAIN_TIPPER // зерновоз_самосвал
  EMPTY_CONTAINER // контейнер_пустой
  CONTAINER_TRUCK // контейнеровоз
  FEED_TRUCK // кормовоз
  TIMBER_TRUCK // лесовоз
  MANIPULATOR // манипулятор
  OIL_TANKER // масловоз
  FURNITURE_TRUCK // меблевоз
  METAL_SCRAP_TRUCK // металовоз_ломовоз
  MINIBUS // микроавтобус
  FLOUR_TRUCK // муковоз
  OVERSIZED // негабарит
  OPEN // открытая
  PANEL_TRUCK // панелевоз
  PLATFORM // платформа
  POULTRY_TRUCK // птицевоз
  ROLL_TRUCK // рулоновоз
  TIPPER // самосвал
  CATTLE_TRUCK // скотовоз
  SPECIAL_MACHINE // спецмашина
  GLASS_TRUCK // стекловоз
  TRAILER // трал
  PIPE_TRUCK // трубовоз
  TRACTOR // тягач
  PLASTIC_BODY // цельнопластик
  CEMENT_TRUCK // цементовоз
  GAS_TANKER // цистерна_газовая
  ISOTHERM_TANKER // цистерна_изотерм
  FOOD_TANKER // цистерна_пищ
  CHEMICAL_TANKER // цистерна_хим
  WOOD_CHIP_TRUCK // щеповоз
  TOW_TRUCK // эвакуатор
  EXCAVATOR // экскаватор
}

enum LoadingType {
  REAR // задняя
  SIDE // боковая
  TOP // верхняя
  FULL // Растентовка
  ANY // любая
}

enum Documents {
  CMR
  TIR
  T1
  T2
  EKMT
  SAN_PASSPORT
  SAN_BOOK
  CUSTOMS_CERT
  CUSTOMS_CONTROL
  COVID_TEST
  COVID_CERT
}

enum DocumentsAdr {
  ADR1
  ADR2
  ADR3
  ADR4
  ADR5
  ADR6
  ADR7
  ADR8
  ADR9
}

enum Loadings {
  ALWAYS // Постоянно
  WEEKLY // Еженедельно
  DAILY // Ежедневно
  AROUND_THE_CLOCK // Круглосуточно
  SEAL // Пломба
  SEMI_TRAILER // Полуприцеп
  COUPLING // Сцепка
  PNEUMATIC_SUSP // Пневмоход
  HYDRAULIC_LIFT // Гидроборт
  CURTAIN // Штора
  PYRAMID // Пирамида
  FRAME // Обрешетка
  MANIPULATOR // Манипулятор
  HYDRAULIC_JACK // Рокла (гидравлическая тележка)
  RAMP // Рампа
}

enum Terms {
  HOOKS // крюки
  REMOVABLE_RACKS // съемные стойки 
  HARD_BOARD // жесткие борта 
  WOODEN_FLOOR // деревянный пол
  HORNS // рога
  MEGA // МЕГА
  JUMBO // ДЖАМБО
  HATCHES // люки
  FAST_UNLOAD // быстрая разгрузка
}

enum TermsPalletsType {
  EUR // EUR 1,2 x 0,8 м
  FIN // FIN 1,2 x 1,0 м
  ISO_111 // ISO 1,1 x 1,1 м
  ISO_100 // ISO 1,0 x 1,0 м
  USA // USA 1,2 x 1,2 м
  TUR // TUR 1,15 x 1,15 м
  CHI // CHI 1,14 x 1,14 м
}

enum Additionally {
  READY_TO_LOAD // Груз готов
  ROUND_TRIP // Кругорейс
  WITH_FORWARDER // Экспедитор
  URGENT // Срочно
  PERISHABLE // Скоропорт
  PLATES_NOW // Номера сейчас
  ONLY_CARRIER // Только перевозчик
  TO_WAREHOUSE // На склад
  GPS // Транспорт с GPS
  FERRY // Паром
  THERMAL_RECORDER // Терморегистратор
}
