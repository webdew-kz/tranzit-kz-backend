
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  phone: 'phone',
  hash: 'hash',
  name: 'name',
  surname: 'surname',
  city: 'city',
  avatar: 'avatar',
  role: 'role',
  whatsapp: 'whatsapp',
  telegram: 'telegram',
  viber: 'viber',
  skype: 'skype',
  subscriptionStartDate: 'subscriptionStartDate',
  subscriptionEndDate: 'subscriptionEndDate',
  subscriptionStatus: 'subscriptionStatus',
  isVerified: 'isVerified',
  isBlocked: 'isBlocked',
  documents: 'documents'
};

exports.Prisma.CargoScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  price: 'price',
  currency: 'currency',
  note: 'note',
  placesLoading: 'placesLoading',
  placesUnloading: 'placesUnloading',
  distance: 'distance',
  tariff: 'tariff',
  routeLink: 'routeLink',
  weight: 'weight',
  volume: 'volume',
  periodDays: 'periodDays',
  startDate: 'startDate',
  endDate: 'endDate',
  isArchived: 'isArchived',
  archivedDate: 'archivedDate',
  truckType: 'truckType',
  loadingType: 'loadingType',
  paymentMethod: 'paymentMethod',
  paymentPeriod: 'paymentPeriod',
  paymentOther: 'paymentOther',
  paymentPrepaymentPercent: 'paymentPrepaymentPercent',
  paymentDeferredDays: 'paymentDeferredDays',
  optionDocuments: 'optionDocuments',
  optionDocumentsAdr: 'optionDocumentsAdr',
  optionLoadings: 'optionLoadings',
  optionLoadingsTimeLoading: 'optionLoadingsTimeLoading',
  optionLoadingsTimeUnloading: 'optionLoadingsTimeUnloading',
  optionLoadingsDateUnloading: 'optionLoadingsDateUnloading',
  optionLoadingsPlaceLoading: 'optionLoadingsPlaceLoading',
  optionLoadingsPlaceUnloading: 'optionLoadingsPlaceUnloading',
  optionLoadingsBigBag: 'optionLoadingsBigBag',
  optionTerms: 'optionTerms',
  optionTermsTemperature: 'optionTermsTemperature',
  optionTermsQtyPallets: 'optionTermsQtyPallets',
  optionTermsCorners: 'optionTermsCorners',
  optionTermsBelts: 'optionTermsBelts',
  optionTermsPalletsType: 'optionTermsPalletsType',
  optionAdditionally: 'optionAdditionally',
  userId: 'userId',
  userName: 'userName',
  userPhone: 'userPhone',
  whatsapp: 'whatsapp',
  telegram: 'telegram',
  viber: 'viber',
  skype: 'skype',
  viewsId: 'viewsId'
};

exports.Prisma.TransportScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  note: 'note',
  placesLoading: 'placesLoading',
  placesUnloading: 'placesUnloading',
  weight: 'weight',
  volume: 'volume',
  periodDays: 'periodDays',
  startDate: 'startDate',
  endDate: 'endDate',
  isArchived: 'isArchived',
  archivedDate: 'archivedDate',
  truckType: 'truckType',
  loadingType: 'loadingType',
  optionDocuments: 'optionDocuments',
  optionDocumentsAdr: 'optionDocumentsAdr',
  userId: 'userId',
  userName: 'userName',
  userPhone: 'userPhone',
  whatsapp: 'whatsapp',
  telegram: 'telegram',
  viber: 'viber',
  skype: 'skype',
  viewsId: 'viewsId'
};

exports.Prisma.ViewsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  count: 'count'
};

exports.Prisma.WishListScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  cargoId: 'cargoId',
  transportId: 'transportId',
  tradeId: 'tradeId'
};

exports.Prisma.CurrencyRateScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  rate: 'rate'
};

exports.Prisma.TradeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  city: 'city',
  variant: 'variant',
  typeTruck: 'typeTruck',
  typeTechnic: 'typeTechnic',
  typeTrailer: 'typeTrailer',
  qtyAxis: 'qtyAxis',
  typeSuspension: 'typeSuspension',
  typeBrake: 'typeBrake',
  isArchived: 'isArchived',
  year: 'year',
  weight: 'weight',
  price: 'price',
  volumeEngine: 'volumeEngine',
  powerEngine: 'powerEngine',
  description: 'description',
  mileage: 'mileage',
  typeEngine: 'typeEngine',
  status: 'status',
  exist: 'exist',
  drive: 'drive',
  transmission: 'transmission',
  steering: 'steering',
  truckWheel: 'truckWheel',
  tractorWheel: 'tractorWheel',
  typeCabin: 'typeCabin',
  cabinSuspension: 'cabinSuspension',
  photos: 'photos',
  userId: 'userId',
  userName: 'userName',
  userPhone: 'userPhone',
  whatsapp: 'whatsapp',
  telegram: 'telegram',
  viber: 'viber',
  skype: 'skype',
  viewsId: 'viewsId',
  trailerBrand: 'trailerBrand',
  truckBrand: 'truckBrand',
  tractorBrand: 'tractorBrand'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

exports.Currency = exports.$Enums.Currency = {
  KZT: 'KZT',
  USD: 'USD',
  RUB: 'RUB',
  EUR: 'EUR',
  CNY: 'CNY',
  TRY: 'TRY',
  UZS: 'UZS'
};

exports.DocumentsAdr = exports.$Enums.DocumentsAdr = {
  ADR1: 'ADR1',
  ADR2: 'ADR2',
  ADR3: 'ADR3',
  ADR4: 'ADR4',
  ADR5: 'ADR5',
  ADR6: 'ADR6',
  ADR7: 'ADR7',
  ADR8: 'ADR8',
  ADR9: 'ADR9'
};

exports.TermsPalletsType = exports.$Enums.TermsPalletsType = {
  EUR: 'EUR',
  FIN: 'FIN',
  ISO_111: 'ISO_111',
  ISO_100: 'ISO_100',
  USA: 'USA',
  TUR: 'TUR',
  CHI: 'CHI'
};

exports.TruckType = exports.$Enums.TruckType = {
  ANY: 'ANY',
  TENT: 'TENT',
  ISOTHERM: 'ISOTHERM',
  REFRIGERATOR: 'REFRIGERATOR',
  PASSENGER_BUS: 'PASSENGER_BUS',
  LUXURY_BUS: 'LUXURY_BUS',
  CAR_CARRIER: 'CAR_CARRIER',
  CRANE: 'CRANE',
  FUEL_TANKER: 'FUEL_TANKER',
  CONCRETE_MIXER: 'CONCRETE_MIXER',
  BITUM_TANKER: 'BITUM_TANKER',
  PLATFORM_BOARD: 'PLATFORM_BOARD',
  GRAIN_TRUCK: 'GRAIN_TRUCK',
  GRAIN_TIPPER: 'GRAIN_TIPPER',
  EMPTY_CONTAINER: 'EMPTY_CONTAINER',
  CONTAINER_TRUCK: 'CONTAINER_TRUCK',
  FEED_TRUCK: 'FEED_TRUCK',
  TIMBER_TRUCK: 'TIMBER_TRUCK',
  MANIPULATOR: 'MANIPULATOR',
  OIL_TANKER: 'OIL_TANKER',
  FURNITURE_TRUCK: 'FURNITURE_TRUCK',
  METAL_SCRAP_TRUCK: 'METAL_SCRAP_TRUCK',
  MINIBUS: 'MINIBUS',
  FLOUR_TRUCK: 'FLOUR_TRUCK',
  OVERSIZED: 'OVERSIZED',
  OPEN: 'OPEN',
  PANEL_TRUCK: 'PANEL_TRUCK',
  PLATFORM: 'PLATFORM',
  POULTRY_TRUCK: 'POULTRY_TRUCK',
  ROLL_TRUCK: 'ROLL_TRUCK',
  TIPPER: 'TIPPER',
  CATTLE_TRUCK: 'CATTLE_TRUCK',
  SPECIAL_MACHINE: 'SPECIAL_MACHINE',
  GLASS_TRUCK: 'GLASS_TRUCK',
  TRAILER: 'TRAILER',
  PIPE_TRUCK: 'PIPE_TRUCK',
  TRACTOR: 'TRACTOR',
  PLASTIC_BODY: 'PLASTIC_BODY',
  CEMENT_TRUCK: 'CEMENT_TRUCK',
  GAS_TANKER: 'GAS_TANKER',
  ISOTHERM_TANKER: 'ISOTHERM_TANKER',
  FOOD_TANKER: 'FOOD_TANKER',
  CHEMICAL_TANKER: 'CHEMICAL_TANKER',
  WOOD_CHIP_TRUCK: 'WOOD_CHIP_TRUCK',
  TOW_TRUCK: 'TOW_TRUCK',
  EXCAVATOR: 'EXCAVATOR',
  SQUARE: 'SQUARE',
  GAZELLE: 'GAZELLE',
  FIVE_TON_TRUCK: 'FIVE_TON_TRUCK'
};

exports.LoadingType = exports.$Enums.LoadingType = {
  REAR: 'REAR',
  SIDE: 'SIDE',
  TOP: 'TOP',
  FULL: 'FULL',
  ANY: 'ANY'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CASHLESS: 'CASHLESS',
  CARD: 'CARD',
  ANY: 'ANY',
  COMBINE: 'COMBINE'
};

exports.PaymentPeriod = exports.$Enums.PaymentPeriod = {
  WHEN_LOADING: 'WHEN_LOADING',
  WHEN_UNLOADING: 'WHEN_UNLOADING',
  AFTER_REGISTER: 'AFTER_REGISTER',
  ORIGIN_DOCS: 'ORIGIN_DOCS'
};

exports.PaymentOther = exports.$Enums.PaymentOther = {
  AUCTION: 'AUCTION',
  NO_AUCTION: 'NO_AUCTION',
  NDS: 'NDS',
  NO_NDS: 'NO_NDS',
  FOR_FUEL: 'FOR_FUEL',
  FAST_PAY: 'FAST_PAY'
};

exports.Documents = exports.$Enums.Documents = {
  CMR: 'CMR',
  TIR: 'TIR',
  T1: 'T1',
  T2: 'T2',
  EKMT: 'EKMT',
  SAN_PASSPORT: 'SAN_PASSPORT',
  SAN_BOOK: 'SAN_BOOK',
  CUSTOMS_CERT: 'CUSTOMS_CERT',
  CUSTOMS_CONTROL: 'CUSTOMS_CONTROL',
  DOZVOL: 'DOZVOL',
  OVERSIZE_SPECIAL_PERMIT: 'OVERSIZE_SPECIAL_PERMIT',
  CATEGORY_C: 'CATEGORY_C',
  CATEGORY_D: 'CATEGORY_D',
  EORI_CODE: 'EORI_CODE',
  REGISTRATION_CARD: 'REGISTRATION_CARD',
  E_QUEUE: 'E_QUEUE',
  VISA: 'VISA',
  POWER_OF_ATTORNEY: 'POWER_OF_ATTORNEY',
  CARRIER_STAMP: 'CARRIER_STAMP'
};

exports.Loadings = exports.$Enums.Loadings = {
  ALWAYS: 'ALWAYS',
  WEEKLY: 'WEEKLY',
  DAILY: 'DAILY',
  AROUND_THE_CLOCK: 'AROUND_THE_CLOCK',
  SEAL: 'SEAL',
  SEMI_TRAILER: 'SEMI_TRAILER',
  COUPLING: 'COUPLING',
  PNEUMATIC_SUSP: 'PNEUMATIC_SUSP',
  HYDRAULIC_LIFT: 'HYDRAULIC_LIFT',
  CURTAIN: 'CURTAIN',
  PYRAMID: 'PYRAMID',
  FRAME: 'FRAME',
  MANIPULATOR: 'MANIPULATOR',
  HYDRAULIC_JACK: 'HYDRAULIC_JACK',
  RAMP: 'RAMP'
};

exports.Terms = exports.$Enums.Terms = {
  HOOKS: 'HOOKS',
  REMOVABLE_RACKS: 'REMOVABLE_RACKS',
  HARD_BOARD: 'HARD_BOARD',
  WOODEN_FLOOR: 'WOODEN_FLOOR',
  HORNS: 'HORNS',
  MEGA: 'MEGA',
  JUMBO: 'JUMBO',
  HATCHES: 'HATCHES',
  FAST_UNLOAD: 'FAST_UNLOAD'
};

exports.Additionally = exports.$Enums.Additionally = {
  READY_TO_LOAD: 'READY_TO_LOAD',
  ROUND_TRIP: 'ROUND_TRIP',
  WITH_FORWARDER: 'WITH_FORWARDER',
  URGENT: 'URGENT',
  PERISHABLE: 'PERISHABLE',
  PLATES_NOW: 'PLATES_NOW',
  ONLY_CARRIER: 'ONLY_CARRIER',
  TO_WAREHOUSE: 'TO_WAREHOUSE',
  GPS: 'GPS',
  FERRY: 'FERRY',
  THERMAL_RECORDER: 'THERMAL_RECORDER'
};

exports.VariantEnum = exports.$Enums.VariantEnum = {
  TRUCK: 'TRUCK',
  TRAILER: 'TRAILER',
  TRACTOR: 'TRACTOR'
};

exports.TypeTruckEnum = exports.$Enums.TypeTruckEnum = {
  AVTOVOZ: 'AVTOVOZ',
  AVTOCISTERNA: 'AVTOCISTERNA',
  BORTOVOI: 'BORTOVOI',
  TERMOFURGON: 'TERMOFURGON',
  REFRIJERATOR: 'REFRIJERATOR',
  SAMOSVAL: 'SAMOSVAL',
  TENT: 'TENT',
  DRUGOI: 'DRUGOI'
};

exports.TypeTechnicEnum = exports.$Enums.TypeTechnicEnum = {
  TRAILER: 'TRAILER',
  SEMI_TRAILER: 'SEMI_TRAILER'
};

exports.TypeTrailerEnum = exports.$Enums.TypeTrailerEnum = {
  AVTOVOZ: 'AVTOVOZ',
  BENZOVOZ: 'BENZOVOZ',
  BITUMOVOZ: 'BITUMOVOZ',
  BORTOVOI: 'BORTOVOI',
  GAZOVOZ: 'GAZOVOZ',
  LEGGOVOZ: 'LEGGOVOZ',
  ZERNOVOZ: 'ZERNOVOZ',
  TERMOFURGON: 'TERMOFURGON',
  KTOVOZ: 'KTOVOZ',
  PANELEVOZ: 'PANELEVOZ',
  PISECHEVAYA_CISTERNA: 'PISECHEVAYA_CISTERNA',
  REFRIJERATOR: 'REFRIJERATOR',
  SAMOSVAL: 'SAMOSVAL',
  TENT: 'TENT',
  TRACTOR: 'TRACTOR',
  TRAL: 'TRAL',
  CHIMICHESKAYA_CISTERNA: 'CHIMICHESKAYA_CISTERNA',
  CELNOMETALLICHESKIY: 'CELNOMETALLICHESKIY',
  CEMENTOVOZ: 'CEMENTOVOZ',
  SHTORNO_BORTOVOI: 'SHTORNO_BORTOVOI',
  SHTORNIY: 'SHTORNIY',
  SHCHEPOVOZ: 'SHCHEPOVOZ',
  DRUGOI: 'DRUGOI'
};

exports.QtyAxisEnum = exports.$Enums.QtyAxisEnum = {
  A1: 'A1',
  A2: 'A2',
  A3: 'A3',
  A4: 'A4',
  A5: 'A5',
  A6: 'A6',
  A7: 'A7',
  A8: 'A8',
  A9: 'A9',
  A10: 'A10'
};

exports.TypeSuspensionEnum = exports.$Enums.TypeSuspensionEnum = {
  BALANCE: 'BALANCE',
  RESSOR: 'RESSOR',
  PNEUMO: 'PNEUMO',
  HYDRAULIC: 'HYDRAULIC',
  SEMI_RESSOR: 'SEMI_RESSOR'
};

exports.TypeBrakeEnum = exports.$Enums.TypeBrakeEnum = {
  DRUM: 'DRUM',
  DISC: 'DISC',
  NO_BRAKE: 'NO_BRAKE'
};

exports.TypeEngineEnum = exports.$Enums.TypeEngineEnum = {
  DIESEL: 'DIESEL',
  GAS: 'GAS',
  GASOLINE: 'GASOLINE',
  ELECTRIC: 'ELECTRIC',
  HYBRID: 'HYBRID',
  DIESEL_ON_GAS: 'DIESEL_ON_GAS',
  GASOLINE_ON_GAS: 'GASOLINE_ON_GAS',
  ANY: 'ANY'
};

exports.StatusEnum = exports.$Enums.StatusEnum = {
  NEW: 'NEW',
  USED: 'USED',
  ANY: 'ANY'
};

exports.ExistEnum = exports.$Enums.ExistEnum = {
  IN_STOCK: 'IN_STOCK',
  ON_ORDER: 'ON_ORDER',
  ANY: 'ANY'
};

exports.DriveEnum = exports.$Enums.DriveEnum = {
  ALL_WHEEL_DRIVE: 'ALL_WHEEL_DRIVE',
  FRONT_WHEEL_DRIVE: 'FRONT_WHEEL_DRIVE',
  REAR_WHEEL_DRIVE: 'REAR_WHEEL_DRIVE',
  FULL_TIME_ALL_WHEEL_DRIVE: 'FULL_TIME_ALL_WHEEL_DRIVE',
  PART_TIME_ALL_WHEEL_DRIVE: 'PART_TIME_ALL_WHEEL_DRIVE',
  REAR_WHEEL_DRIVE_WITH_FRONT_WHEEL: 'REAR_WHEEL_DRIVE_WITH_FRONT_WHEEL',
  ANY: 'ANY'
};

exports.TransmissionEnum = exports.$Enums.TransmissionEnum = {
  AUTOMATIC: 'AUTOMATIC',
  MECHANICAL: 'MECHANICAL',
  SEMI_AUTOMATIC: 'SEMI_AUTOMATIC',
  ANY: 'ANY'
};

exports.SteeringEnum = exports.$Enums.SteeringEnum = {
  LEFT: 'LEFT',
  RIGHT: 'RIGHT',
  ANY: 'ANY'
};

exports.TruckWheelEnum = exports.$Enums.TruckWheelEnum = {
  W4X2: 'W4X2',
  W4X4: 'W4X4',
  W6X2: 'W6X2',
  W6X4: 'W6X4',
  W6X6: 'W6X6',
  W8X2: 'W8X2',
  W8X4: 'W8X4',
  W8X6: 'W8X6',
  W8X8: 'W8X8',
  W10X2: 'W10X2',
  W10X4: 'W10X4',
  W10X6: 'W10X6',
  W10X8: 'W10X8',
  w10X10: 'w10X10',
  W12X4: 'W12X4',
  W12X8: 'W12X8',
  OTHER: 'OTHER',
  ANY: 'ANY'
};

exports.TractorWheelEnum = exports.$Enums.TractorWheelEnum = {
  W4X2: 'W4X2',
  W4X4: 'W4X4',
  W6X2: 'W6X2',
  W6X4: 'W6X4',
  W8X4: 'W8X4',
  W8X6: 'W8X6',
  W8X8: 'W8X8',
  OTHER: 'OTHER',
  ANY: 'ANY'
};

exports.TypeCabinEnum = exports.$Enums.TypeCabinEnum = {
  SEAT_2_WITHOUT_BED: 'SEAT_2_WITHOUT_BED',
  SEAT_2_WITH_1_BED: 'SEAT_2_WITH_1_BED',
  SEAT_2_WITH_2_BEDS: 'SEAT_2_WITH_2_BEDS',
  SEAT_3_WITHOUT_BED: 'SEAT_3_WITHOUT_BED',
  SEAT_3_WITH_1_BED: 'SEAT_3_WITH_1_BED'
};

exports.CabinSuspensionEnum = exports.$Enums.CabinSuspensionEnum = {
  BALANCE: 'BALANCE',
  RESSOR: 'RESSOR',
  PNEUMO: 'PNEUMO',
  HYDRAULIC: 'HYDRAULIC',
  SEMI_RESSOR: 'SEMI_RESSOR'
};

exports.TrailerBrandEnum = exports.$Enums.TrailerBrandEnum = {
  OTHER: 'OTHER',
  AMT_NV: 'AMT_NV',
  ASIA: 'ASIA',
  AVIA: 'AVIA',
  BAW: 'BAW',
  BEIBEN_NORTH_BENZ: 'BEIBEN_NORTH_BENZ',
  BMC: 'BMC',
  BYD: 'BYD',
  CAMC: 'CAMC',
  CHANGAN: 'CHANGAN',
  CHEVROLET: 'CHEVROLET',
  CLW: 'CLW',
  DAEWOO: 'DAEWOO',
  DAF: 'DAF',
  DAYUN_TRUCK: 'DAYUN_TRUCK',
  DERRY: 'DERRY',
  DESOTO: 'DESOTO',
  DFAC: 'DFAC',
  DFSK: 'DFSK',
  DONGFENG: 'DONGFENG',
  EVM: 'EVM',
  FARIZON: 'FARIZON',
  FAW: 'FAW',
  FIAT: 'FIAT',
  FIAT_PROFESSIONAL: 'FIAT_PROFESSIONAL',
  FORD: 'FORD',
  FORLAND: 'FORLAND',
  FOTON: 'FOTON',
  FREIGHTLINER: 'FREIGHTLINER',
  FUSO_MITSUBISHI: 'FUSO_MITSUBISHI',
  GAC: 'GAC',
  GEELY: 'GEELY',
  GMC: 'GMC',
  GROZ: 'GROZ',
  HINO: 'HINO',
  HKTC: 'HKTC',
  HONGYAN: 'HONGYAN',
  HOWO: 'HOWO',
  HYUNDAI: 'HYUNDAI',
  HYVA: 'HYVA',
  IFA: 'IFA',
  INTERNATIONAL: 'INTERNATIONAL',
  INTERNATIONAL_WORKSTAR: 'INTERNATIONAL_WORKSTAR',
  ISUZU: 'ISUZU',
  IVECO: 'IVECO',
  IVECO_HONGYAN: 'IVECO_HONGYAN',
  IVECO_LING_YE: 'IVECO_LING_YE',
  IVECO_AMT: 'IVECO_AMT',
  JAC: 'JAC',
  JBC: 'JBC',
  JIEFANG: 'JIEFANG',
  JMC: 'JMC',
  KAMA: 'KAMA',
  KENWORTH: 'KENWORTH',
  KIA: 'KIA',
  KYC: 'KYC',
  LADA_VAZ: 'LADA_VAZ',
  LGMG: 'LGMG',
  MAN: 'MAN',
  MAXUS: 'MAXUS',
  MAZDA: 'MAZDA',
  MERCEDES_BENZ: 'MERCEDES_BENZ',
  MITSUBISHI: 'MITSUBISHI',
  NISSAN: 'NISSAN',
  NORTH_BENZ: 'NORTH_BENZ',
  PETERBILT: 'PETERBILT',
  PEUGEOT: 'PEUGEOT',
  RENAULT: 'RENAULT',
  SANY: 'SANY',
  SCANIA: 'SCANIA',
  SHACMAN: 'SHACMAN',
  SHACMAN_SHAANXI: 'SHACMAN_SHAANXI',
  SHANDONG_KAMA: 'SHANDONG_KAMA',
  SHINERAY: 'SHINERAY',
  SINOTRUK: 'SINOTRUK',
  SINOTRUK_SITRAK: 'SINOTRUK_SITRAK',
  SISU: 'SISU',
  SITRAK: 'SITRAK',
  SSANGYONG: 'SSANGYONG',
  STAR: 'STAR',
  STEYR: 'STEYR',
  TATA: 'TATA',
  TATRA: 'TATRA',
  TONLY: 'TONLY',
  TOYOTA: 'TOYOTA',
  VOLKSWAGEN: 'VOLKSWAGEN',
  VOLVO: 'VOLVO',
  WAW: 'WAW',
  WEICHAI: 'WEICHAI',
  WULING: 'WULING',
  XCMG: 'XCMG',
  XINFEIG: 'XINFEIG',
  YUEJIN: 'YUEJIN',
  YUTONG: 'YUTONG',
  ZOOMLION: 'ZOOMLION',
  ZUK: 'ZUK',
  BELAZ: 'BELAZ',
  VALDAY: 'VALDAY',
  GAZ: 'GAZ',
  GAZ_SAZ: 'GAZ_SAZ',
  GK_MZSA: 'GK_MZSA',
  ZIL: 'ZIL',
  IZH: 'IZH',
  KAMAZ: 'KAMAZ',
  KRAZ: 'KRAZ',
  MAZ: 'MAZ',
  MAZ_MAN: 'MAZ_MAN',
  MZKT: 'MZKT',
  NEFAZ: 'NEFAZ',
  UAZ: 'UAZ',
  URAL: 'URAL'
};

exports.TruckBrandEnum = exports.$Enums.TruckBrandEnum = {
  OTHER: 'OTHER',
  ASTRA: 'ASTRA',
  AVIA: 'AVIA',
  BAW: 'BAW',
  BEIBEN_NORTH_BENZ: 'BEIBEN_NORTH_BENZ',
  BMC: 'BMC',
  BYD: 'BYD',
  CAMC: 'CAMC',
  CATERPILLAR: 'CATERPILLAR',
  CHAMELEON: 'CHAMELEON',
  CHANGAN: 'CHANGAN',
  CHEVROLET: 'CHEVROLET',
  CLW: 'CLW',
  DAF: 'DAF',
  DAEWOO: 'DAEWOO',
  DAYUN: 'DAYUN',
  DAYUN_TRUCK: 'DAYUN_TRUCK',
  DESOTO: 'DESOTO',
  DERRY: 'DERRY',
  DFAC: 'DFAC',
  DONGFENG: 'DONGFENG',
  EVM: 'EVM',
  FAW: 'FAW',
  FARIZON: 'FARIZON',
  FIAT: 'FIAT',
  FIAT_PROFESSIONAL: 'FIAT_PROFESSIONAL',
  FORD: 'FORD',
  FORLAND: 'FORLAND',
  FOTON: 'FOTON',
  FREIGHTLINER: 'FREIGHTLINER',
  FUSO_MITSUBISHI: 'FUSO_MITSUBISHI',
  GAC: 'GAC',
  GEELY: 'GEELY',
  GMC: 'GMC',
  GROZ: 'GROZ',
  HINO: 'HINO',
  HONDA: 'HONDA',
  HONGYAN: 'HONGYAN',
  HOWO: 'HOWO',
  HYUNDAI: 'HYUNDAI',
  HYVA: 'HYVA',
  IFA: 'IFA',
  INTERNATIONAL: 'INTERNATIONAL',
  INTERNATIONAL_WORKSTAR: 'INTERNATIONAL_WORKSTAR',
  ISUZU: 'ISUZU',
  IVECO: 'IVECO',
  IVECO_HONGYAN: 'IVECO_HONGYAN',
  JAC: 'JAC',
  JBC: 'JBC',
  JIEFANG: 'JIEFANG',
  JINPENG: 'JINPENG',
  JMC: 'JMC',
  KAMA: 'KAMA',
  KENWORTH: 'KENWORTH',
  KIA: 'KIA',
  KYC: 'KYC',
  LADA: 'LADA',
  LGMG: 'LGMG',
  MAN: 'MAN',
  MAZDA: 'MAZDA',
  MEILLER_KIPPER: 'MEILLER_KIPPER',
  MERCEDES_BENZ: 'MERCEDES_BENZ',
  MITSUBISHI: 'MITSUBISHI',
  NISSAN: 'NISSAN',
  NORTH_BENZ: 'NORTH_BENZ',
  OPEL: 'OPEL',
  PEUGEOT: 'PEUGEOT',
  RENAULT: 'RENAULT',
  ROBUR: 'ROBUR',
  SANY: 'SANY',
  SCANIA: 'SCANIA',
  SHAANXI: 'SHAANXI',
  SHACMAN: 'SHACMAN',
  SHACMAN_SHAANXI: 'SHACMAN_SHAANXI',
  SHANDONG_KAMA: 'SHANDONG_KAMA',
  SHINERAY: 'SHINERAY',
  SINOTRUK: 'SINOTRUK',
  SINOTRUK_SITRAK: 'SINOTRUK_SITRAK',
  SITRAK: 'SITRAK',
  SSANGYONG: 'SSANGYONG',
  STAR: 'STAR',
  STEYR: 'STEYR',
  TATA: 'TATA',
  TATRA: 'TATRA',
  TONLY: 'TONLY',
  TOYOTA: 'TOYOTA',
  VOLKSWAGEN: 'VOLKSWAGEN',
  VOLVO: 'VOLVO',
  WEICHAI: 'WEICHAI',
  WULING: 'WULING',
  XCMG: 'XCMG',
  XINFEIG: 'XINFEIG',
  YUEJIN: 'YUEJIN',
  YUTONG: 'YUTONG',
  ZOOMLION: 'ZOOMLION'
};

exports.TractorBrandEnum = exports.$Enums.TractorBrandEnum = {
  AMT_NV: 'AMT_NV',
  BAIC: 'BAIC',
  BEIBEN_NORTH_BENZ: 'BEIBEN_NORTH_BENZ',
  CAMC: 'CAMC',
  CHENGLONG: 'CHENGLONG',
  DAF: 'DAF',
  DAEWOO: 'DAEWOO',
  DAYUN: 'DAYUN',
  DONGFENG: 'DONGFENG',
  DOOSAN: 'DOOSAN',
  ERF_MAN_TRUCK: 'ERF_MAN_TRUCK',
  FAW: 'FAW',
  FORD: 'FORD',
  FOTON: 'FOTON',
  FREIGHTLINER: 'FREIGHTLINER',
  FUSO_MITSUBISHI: 'FUSO_MITSUBISHI',
  HINO: 'HINO',
  HOWO: 'HOWO',
  HYUNDAI: 'HYUNDAI',
  IVECO: 'IVECO',
  IVECO_HONGYAN: 'IVECO_HONGYAN',
  IVECO_LING_YE: 'IVECO_LING_YE',
  INTERNATIONAL: 'INTERNATIONAL',
  ISUZU: 'ISUZU',
  IVECO_AMT: 'IVECO_AMT',
  JAC: 'JAC',
  KALMAR: 'KALMAR',
  KENWORTH: 'KENWORTH',
  MAN: 'MAN',
  MACK: 'MACK',
  MAGIRUS: 'MAGIRUS',
  MERCEDES_BENZ: 'MERCEDES_BENZ',
  NISSAN: 'NISSAN',
  PETERBILT: 'PETERBILT',
  RENAULT: 'RENAULT',
  SANY: 'SANY',
  SCANIA: 'SCANIA',
  SHACMAN_SHAANXI: 'SHACMAN_SHAANXI',
  SINOTRUK_HANIA: 'SINOTRUK_HANIA',
  SINOTRUK_SITRAK: 'SINOTRUK_SITRAK',
  SISU: 'SISU',
  SKODA_LIAZ: 'SKODA_LIAZ',
  STERLING: 'STERLING',
  STEYR: 'STEYR',
  TATRA: 'TATRA',
  TERBERG: 'TERBERG',
  TESLA: 'TESLA',
  TIANHONG: 'TIANHONG',
  RUSICH_KZKT: 'RUSICH_KZKT',
  TONAR: 'TONAR',
  URAL: 'URAL',
  YAROVIT_MOTORS: 'YAROVIT_MOTORS',
  TITAN: 'TITAN',
  VOLKSWAGEN: 'VOLKSWAGEN',
  VOLVO: 'VOLVO',
  WESTERN_STAR: 'WESTERN_STAR',
  XCMG: 'XCMG',
  YOUNGMAN: 'YOUNGMAN',
  BZKT: 'BZKT',
  VALDAY: 'VALDAY',
  GAZ: 'GAZ',
  GK_MZSA: 'GK_MZSA',
  ZIL: 'ZIL',
  KAMAZ: 'KAMAZ',
  KRAZ: 'KRAZ',
  MAZ: 'MAZ',
  MAZ_MAN: 'MAZ_MAN',
  MZKT: 'MZKT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Cargo: 'Cargo',
  Transport: 'Transport',
  Views: 'Views',
  WishList: 'WishList',
  CurrencyRate: 'CurrencyRate',
  Trade: 'Trade'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
