
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  phone: 'phone',
  hash: 'hash',
  name: 'name',
  surname: 'surname',
  city: 'city',
  avatar: 'avatar',
  role: 'role',
  whatsapp: 'whatsapp',
  telegram: 'telegram',
  viber: 'viber',
  skype: 'skype',
  subscriptionStartDate: 'subscriptionStartDate',
  subscriptionEndDate: 'subscriptionEndDate',
  subscriptionStatus: 'subscriptionStatus',
  isVerified: 'isVerified',
  isBlocked: 'isBlocked',
  documents: 'documents'
};

exports.Prisma.CargoScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  price: 'price',
  currency: 'currency',
  note: 'note',
  placesLoading: 'placesLoading',
  placesUnloading: 'placesUnloading',
  distance: 'distance',
  tariff: 'tariff',
  routeLink: 'routeLink',
  weight: 'weight',
  volume: 'volume',
  periodDays: 'periodDays',
  startDate: 'startDate',
  endDate: 'endDate',
  isArchived: 'isArchived',
  archivedDate: 'archivedDate',
  truckType: 'truckType',
  loadingType: 'loadingType',
  paymentMethod: 'paymentMethod',
  paymentPeriod: 'paymentPeriod',
  paymentOther: 'paymentOther',
  paymentPrepaymentPercent: 'paymentPrepaymentPercent',
  paymentDeferredDays: 'paymentDeferredDays',
  optionDocuments: 'optionDocuments',
  optionDocumentsAdr: 'optionDocumentsAdr',
  optionLoadings: 'optionLoadings',
  optionLoadingsTimeLoading: 'optionLoadingsTimeLoading',
  optionLoadingsTimeUnloading: 'optionLoadingsTimeUnloading',
  optionLoadingsDateUnloading: 'optionLoadingsDateUnloading',
  optionLoadingsPlaceLoading: 'optionLoadingsPlaceLoading',
  optionLoadingsPlaceUnloading: 'optionLoadingsPlaceUnloading',
  optionLoadingsBigBag: 'optionLoadingsBigBag',
  optionTerms: 'optionTerms',
  optionTermsTemperature: 'optionTermsTemperature',
  optionTermsQtyPallets: 'optionTermsQtyPallets',
  optionTermsCorners: 'optionTermsCorners',
  optionTermsBelts: 'optionTermsBelts',
  optionTermsPalletsType: 'optionTermsPalletsType',
  optionAdditionally: 'optionAdditionally',
  userId: 'userId',
  userName: 'userName',
  userPhone: 'userPhone',
  viewsId: 'viewsId'
};

exports.Prisma.ViewsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  count: 'count'
};

exports.Prisma.WishListScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  cargoId: 'cargoId'
};

exports.Prisma.CurrencyRateScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  rate: 'rate'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

exports.Currency = exports.$Enums.Currency = {
  KZT: 'KZT',
  USD: 'USD',
  RUB: 'RUB',
  EUR: 'EUR',
  CNY: 'CNY',
  TRY: 'TRY',
  UZS: 'UZS'
};

exports.DocumentsAdr = exports.$Enums.DocumentsAdr = {
  ADR1: 'ADR1',
  ADR2: 'ADR2',
  ADR3: 'ADR3',
  ADR4: 'ADR4',
  ADR5: 'ADR5',
  ADR6: 'ADR6',
  ADR7: 'ADR7',
  ADR8: 'ADR8',
  ADR9: 'ADR9'
};

exports.TermsPalletsType = exports.$Enums.TermsPalletsType = {
  EUR: 'EUR',
  FIN: 'FIN',
  ISO_111: 'ISO_111',
  ISO_100: 'ISO_100',
  USA: 'USA',
  TUR: 'TUR',
  CHI: 'CHI'
};

exports.TruckType = exports.$Enums.TruckType = {
  ANY: 'ANY',
  TENT: 'TENT',
  ISOTHERM: 'ISOTHERM',
  METAL: 'METAL',
  REFRIGERATOR: 'REFRIGERATOR',
  PASSENGER_BUS: 'PASSENGER_BUS',
  LUXURY_BUS: 'LUXURY_BUS',
  CAR_CARRIER: 'CAR_CARRIER',
  CRANE: 'CRANE',
  FUEL_TANKER: 'FUEL_TANKER',
  CONCRETE_MIXER: 'CONCRETE_MIXER',
  BITUM_TANKER: 'BITUM_TANKER',
  PLATFORM_BOARD: 'PLATFORM_BOARD',
  GRAIN_TRUCK: 'GRAIN_TRUCK',
  GRAIN_TIPPER: 'GRAIN_TIPPER',
  EMPTY_CONTAINER: 'EMPTY_CONTAINER',
  CONTAINER_TRUCK: 'CONTAINER_TRUCK',
  FEED_TRUCK: 'FEED_TRUCK',
  TIMBER_TRUCK: 'TIMBER_TRUCK',
  MANIPULATOR: 'MANIPULATOR',
  OIL_TANKER: 'OIL_TANKER',
  FURNITURE_TRUCK: 'FURNITURE_TRUCK',
  METAL_SCRAP_TRUCK: 'METAL_SCRAP_TRUCK',
  MINIBUS: 'MINIBUS',
  FLOUR_TRUCK: 'FLOUR_TRUCK',
  OVERSIZED: 'OVERSIZED',
  OPEN: 'OPEN',
  PANEL_TRUCK: 'PANEL_TRUCK',
  PLATFORM: 'PLATFORM',
  POULTRY_TRUCK: 'POULTRY_TRUCK',
  ROLL_TRUCK: 'ROLL_TRUCK',
  TIPPER: 'TIPPER',
  CATTLE_TRUCK: 'CATTLE_TRUCK',
  SPECIAL_MACHINE: 'SPECIAL_MACHINE',
  GLASS_TRUCK: 'GLASS_TRUCK',
  TRAILER: 'TRAILER',
  PIPE_TRUCK: 'PIPE_TRUCK',
  TRACTOR: 'TRACTOR',
  PLASTIC_BODY: 'PLASTIC_BODY',
  CEMENT_TRUCK: 'CEMENT_TRUCK',
  GAS_TANKER: 'GAS_TANKER',
  ISOTHERM_TANKER: 'ISOTHERM_TANKER',
  FOOD_TANKER: 'FOOD_TANKER',
  CHEMICAL_TANKER: 'CHEMICAL_TANKER',
  WOOD_CHIP_TRUCK: 'WOOD_CHIP_TRUCK',
  TOW_TRUCK: 'TOW_TRUCK',
  EXCAVATOR: 'EXCAVATOR'
};

exports.LoadingType = exports.$Enums.LoadingType = {
  REAR: 'REAR',
  SIDE: 'SIDE',
  TOP: 'TOP',
  FULL: 'FULL',
  ANY: 'ANY'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CASHLESS: 'CASHLESS',
  CARD: 'CARD',
  ANY: 'ANY',
  COMBINE: 'COMBINE'
};

exports.PaymentPeriod = exports.$Enums.PaymentPeriod = {
  WHEN_LOADING: 'WHEN_LOADING',
  WHEN_UNLOADING: 'WHEN_UNLOADING',
  AFTER_REGISTER: 'AFTER_REGISTER',
  ORIGIN_DOCS: 'ORIGIN_DOCS'
};

exports.PaymentOther = exports.$Enums.PaymentOther = {
  AUCTION: 'AUCTION',
  NO_AUCTION: 'NO_AUCTION',
  NDS: 'NDS',
  NO_NDS: 'NO_NDS',
  FOR_FUEL: 'FOR_FUEL',
  FAST_PAY: 'FAST_PAY'
};

exports.Documents = exports.$Enums.Documents = {
  CMR: 'CMR',
  TIR: 'TIR',
  T1: 'T1',
  T2: 'T2',
  EKMT: 'EKMT',
  SAN_PASSPORT: 'SAN_PASSPORT',
  SAN_BOOK: 'SAN_BOOK',
  CUSTOMS_CERT: 'CUSTOMS_CERT',
  CUSTOMS_CONTROL: 'CUSTOMS_CONTROL',
  COVID_TEST: 'COVID_TEST',
  COVID_CERT: 'COVID_CERT'
};

exports.Loadings = exports.$Enums.Loadings = {
  ALWAYS: 'ALWAYS',
  WEEKLY: 'WEEKLY',
  DAILY: 'DAILY',
  AROUND_THE_CLOCK: 'AROUND_THE_CLOCK',
  SEAL: 'SEAL',
  SEMI_TRAILER: 'SEMI_TRAILER',
  COUPLING: 'COUPLING',
  PNEUMATIC_SUSP: 'PNEUMATIC_SUSP',
  HYDRAULIC_LIFT: 'HYDRAULIC_LIFT',
  CURTAIN: 'CURTAIN',
  PYRAMID: 'PYRAMID',
  FRAME: 'FRAME',
  MANIPULATOR: 'MANIPULATOR',
  HYDRAULIC_JACK: 'HYDRAULIC_JACK',
  RAMP: 'RAMP'
};

exports.Terms = exports.$Enums.Terms = {
  HOOKS: 'HOOKS',
  REMOVABLE_RACKS: 'REMOVABLE_RACKS',
  HARD_BOARD: 'HARD_BOARD',
  WOODEN_FLOOR: 'WOODEN_FLOOR',
  HORNS: 'HORNS',
  MEGA: 'MEGA',
  JUMBO: 'JUMBO',
  HATCHES: 'HATCHES',
  FAST_UNLOAD: 'FAST_UNLOAD'
};

exports.Additionally = exports.$Enums.Additionally = {
  READY_TO_LOAD: 'READY_TO_LOAD',
  ROUND_TRIP: 'ROUND_TRIP',
  WITH_FORWARDER: 'WITH_FORWARDER',
  URGENT: 'URGENT',
  PERISHABLE: 'PERISHABLE',
  PLATES_NOW: 'PLATES_NOW',
  ONLY_CARRIER: 'ONLY_CARRIER',
  TO_WAREHOUSE: 'TO_WAREHOUSE',
  GPS: 'GPS',
  FERRY: 'FERRY',
  THERMAL_RECORDER: 'THERMAL_RECORDER'
};

exports.Prisma.ModelName = {
  User: 'User',
  Cargo: 'Cargo',
  Views: 'Views',
  WishList: 'WishList',
  CurrencyRate: 'CurrencyRate'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
